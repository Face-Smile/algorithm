//È™åËØÅÁªôÂÆöÁöÑÂ≠óÁ¨¶‰∏≤ÊòØÂê¶ÂèØ‰ª•Ëß£Èáä‰∏∫ÂçÅËøõÂà∂Êï∞Â≠ó„ÄÇ
//
// ‰æãÂ¶Ç:
//
// "0" => true
//" 0.1 " => true
//"abc" => false
//"1 a" => false
//"2e10" => true
//" -90e3 " => true
//" 1e" => false
//"e3" => false
//" 6e-1" => true
//" 99e2.5 " => false
//"53.5e93" => true
//" --6 " => false
//"-+3" => false
//"95a54e53" => false
//
// ËØ¥Êòé: Êàë‰ª¨ÊúâÊÑèÂ∞ÜÈóÆÈ¢òÈôàËø∞Âú∞ÊØîËæÉÊ®°Á≥ä„ÄÇÂú®ÂÆûÁé∞‰ª£Á†Å‰πãÂâçÔºå‰Ω†Â∫îÂΩì‰∫ãÂÖàÊÄùËÄÉÊâÄÊúâÂèØËÉΩÁöÑÊÉÖÂÜµ„ÄÇËøôÈáåÁªôÂá∫‰∏Ä‰ªΩÂèØËÉΩÂ≠òÂú®‰∫éÊúâÊïàÂçÅËøõÂà∂Êï∞Â≠ó‰∏≠ÁöÑÂ≠óÁ¨¶ÂàóË°®Ôºö
//
//
// Êï∞Â≠ó 0-9
// ÊåáÊï∞ - "e"
// Ê≠£/Ë¥üÂè∑ - "+"/"-"
// Â∞èÊï∞ÁÇπ - "."
//
//
// ÂΩìÁÑ∂ÔºåÂú®ËæìÂÖ•‰∏≠ÔºåËøô‰∫õÂ≠óÁ¨¶ÁöÑ‰∏ä‰∏ãÊñá‰πüÂæàÈáçË¶Å„ÄÇ
//
// Êõ¥Êñ∞‰∫é 2015-02-10:
//C++ÂáΩÊï∞ÁöÑÂΩ¢ÂºèÂ∑≤ÁªèÊõ¥Êñ∞‰∫Ü„ÄÇÂ¶ÇÊûú‰Ω†‰ªçÁÑ∂ÁúãËßÅ‰Ω†ÁöÑÂáΩÊï∞Êé•Êî∂ const char * Á±ªÂûãÁöÑÂèÇÊï∞ÔºåËØ∑ÁÇπÂáªÈáçËΩΩÊåâÈíÆÈáçÁΩÆ‰Ω†ÁöÑ‰ª£Á†Å„ÄÇ
// Related Topics Êï∞Â≠¶ Â≠óÁ¨¶‰∏≤
// üëç 168 üëé 0
package algorithm.p65.isNumber;

import java.util.HashMap;
import java.util.Map;

public class Solution {
    public static void main(String[] args) {
        System.out.println(new Solution().isNumber("53.5e93"));
        System.out.println(new Solution().isNumber("-123.456e789"));
        System.out.println(new Solution().isNumber("-.9"));
        System.out.println(new Solution().isNumber("-9."));
        System.out.println(new Solution().isNumber("+9."));
        System.out.println(new Solution().isNumber(" 2e0 "));
        System.out.println(new Solution().isNumber(" 2E8 "));
        System.out.println("-----------------------------");
        System.out.println(new Solution().isNumber(" 2e1. "));
        System.out.println(new Solution().isNumber(" 2e.1 "));
        System.out.println(new Solution().isNumber("99e2.5"));
        System.out.println(new Solution().isNumber("-.9."));

        System.out.println("*************************************");

        System.out.println(new Solution().isNumberWithFiniteStateMachine("53.5e93"));
        System.out.println(new Solution().isNumberWithFiniteStateMachine("-123.456e789"));
        System.out.println(new Solution().isNumberWithFiniteStateMachine("-.9"));
        System.out.println(new Solution().isNumberWithFiniteStateMachine("-9."));
        System.out.println(new Solution().isNumberWithFiniteStateMachine("+9."));
        System.out.println(new Solution().isNumberWithFiniteStateMachine(" 2e0 "));
        System.out.println(new Solution().isNumberWithFiniteStateMachine(" 2E8 "));
        System.out.println("-----------------------------");
        System.out.println(new Solution().isNumberWithFiniteStateMachine(" 2e1. "));
        System.out.println(new Solution().isNumberWithFiniteStateMachine(" 2e.1 "));
        System.out.println(new Solution().isNumberWithFiniteStateMachine("99e2.5"));
        System.out.println(new Solution().isNumberWithFiniteStateMachine("-.9."));


        System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");

        System.out.println(new Solution().isNumberWithLaw("53.5e93"));
        System.out.println(new Solution().isNumberWithLaw("-123.456e789"));
        System.out.println(new Solution().isNumberWithLaw("-.9"));
        System.out.println(new Solution().isNumberWithLaw("-9."));
        System.out.println(new Solution().isNumberWithLaw("+9."));
        System.out.println(new Solution().isNumberWithLaw(" 2e0 "));
        System.out.println(new Solution().isNumberWithLaw(" 2E8 "));
        System.out.println(new Solution().isNumberWithLaw(" +2.8e+9 "));
        System.out.println("-----------------------------");
        System.out.println(new Solution().isNumberWithLaw("  "));
        System.out.println(new Solution().isNumberWithLaw(" 2e1. "));
        System.out.println(new Solution().isNumberWithLaw(" e9 "));
        System.out.println(new Solution().isNumberWithLaw(" 0e "));
        System.out.println(new Solution().isNumberWithLaw(" 2e.1 "));
        System.out.println(new Solution().isNumberWithLaw("99e2.5"));
        System.out.println(new Solution().isNumberWithLaw("-.9."));
        System.out.println(new Solution().isNumberWithLaw(".-4e"));
        System.out.println(new Solution().isNumberWithLaw(".4e5+"));

        System.out.println("+++++++++++++++++++++++++++++++++++++++++++++");

        System.out.println(new Solution().isNumberWithLaw1("53.5e93"));
        System.out.println(new Solution().isNumberWithLaw1("-123.456e789"));
        System.out.println(new Solution().isNumberWithLaw1("-.9"));
        System.out.println(new Solution().isNumberWithLaw1("-9."));
        System.out.println(new Solution().isNumberWithLaw1("+9."));
        System.out.println(new Solution().isNumberWithLaw1(" 2e0 "));
        System.out.println(new Solution().isNumberWithLaw1(" 2E8 "));
        System.out.println(new Solution().isNumberWithLaw1(" +2.8e+9 "));
        System.out.println("-----------------------------");
        System.out.println(new Solution().isNumberWithLaw1("  "));
        System.out.println(new Solution().isNumberWithLaw1(" 2e1. "));
        System.out.println(new Solution().isNumberWithLaw1(" e9 "));
        System.out.println(new Solution().isNumberWithLaw1(" 0e "));
        System.out.println(new Solution().isNumberWithLaw1(" 2e.1 "));
        System.out.println(new Solution().isNumberWithLaw1("99e2.5"));
        System.out.println(new Solution().isNumberWithLaw1("-.9."));
        System.out.println(new Solution().isNumberWithLaw1(".-4e"));
        System.out.println(new Solution().isNumberWithLaw1(".-4"));
        System.out.println(new Solution().isNumberWithLaw1(".4e5+"));
    }

    enum State {
        STATE_INITIAL,  // ÂàùÂßãÁä∂ÊÄÅ
        STATE_INT_SIGN, // Á¨¶Âè∑‰Ωç
        STATE_INTEGER, // Êï¥Êï∞ÈÉ®ÂàÜ(Ê≠§Áä∂ÊÄÅÁªìÊùü‰∏∫ÂÆåÊï¥Êï∞Â≠ó)
        STATE_POINT, // Â∑¶‰æßÊúâÊï¥Êï∞Â∞èÊï∞ÁÇπ(Ê≠§Áä∂ÊÄÅÁªìÊùü‰∏∫ÂÆåÊï¥Êï∞Â≠ó)
        STATE_POINT_WITHOUT_INT, // Â∑¶‰æßÊó†Êï¥Êï∞Â∞èÊï∞ÁÇπ
        STATE_FRACTION, // Â∞èÊï∞ÈÉ®ÂàÜ(Ê≠§Áä∂ÊÄÅÁªìÊùü‰∏∫ÂÆåÊï¥Êï∞Â≠ó)
        STATE_EXP, // Â≠óÁ¨¶e
        STATE_EXP_SIGN, // ÊåáÊï∞Á¨¶Âè∑
        STATE_EXP_INT, // ÊåáÊï∞Êï¥Êï∞ÈÉ®ÂàÜ(Ê≠§Áä∂ÊÄÅÁªìÊùü‰∏∫ÂÆåÊï¥Êï∞Â≠ó)
        STATE_END // ÁªìÊùüÁä∂ÊÄÅ(Ê≠§Áä∂ÊÄÅÁªìÊùü‰∏∫ÂÆåÊï¥Êï∞Â≠ó)
    }

    enum CharType {
        CHAR_SPACE, // Á©∫Ê†º
        CHAR_NUMBER, // Êï∞Â≠ó
        CHAR_SIGN, // Á¨¶Âè∑
        CHAR_EXP, // Â≠óÁ¨¶e
        CHAR_POINT, // Â∞èÊï∞ÁÇπ
        CHAR_ILLEGAL // ÈùûÊ≥ïÂ≠óÁ¨¶
    }


    public static CharType toCharType(char s) {
        if (s == ' ')
            return CharType.CHAR_SPACE;
        else if (s >= '0' && s <= '9')
            return CharType.CHAR_NUMBER;
        else if (s == '-' || s == '+')
            return CharType.CHAR_SIGN;
        else if (s == 'e' || s == 'E')
            return CharType.CHAR_EXP;
        else if (s == '.')
            return CharType.CHAR_POINT;
        else
            return CharType.CHAR_ILLEGAL;
    }


    public static Map<State, Map<CharType, State>> transfer() {
        Map<State, Map<CharType, State>> transfer = new HashMap<>();
        Map<CharType, State> stateInitialMap = new HashMap<CharType, State>() {{
            put(CharType.CHAR_SPACE, State.STATE_INITIAL);
            put(CharType.CHAR_SIGN, State.STATE_INT_SIGN);
            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);
            put(CharType.CHAR_POINT, State.STATE_POINT_WITHOUT_INT);
        }};
        transfer.put(State.STATE_INITIAL, stateInitialMap);

        Map<CharType, State> stateIntSignMap = new HashMap<CharType, State>() {{
            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);
            put(CharType.CHAR_POINT, State.STATE_POINT_WITHOUT_INT);
        }};
        transfer.put(State.STATE_INT_SIGN, stateIntSignMap);

        Map<CharType, State> stateIntegerMap = new HashMap<CharType, State>() {{
            put(CharType.CHAR_SPACE, State.STATE_END);
            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);
            put(CharType.CHAR_EXP, State.STATE_EXP);
            put(CharType.CHAR_POINT, State.STATE_POINT);
        }};
        transfer.put(State.STATE_INTEGER, stateIntegerMap);

        Map<CharType, State> statePointMap = new HashMap<CharType, State>() {{
            put(CharType.CHAR_SPACE, State.STATE_END);
            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);
            put(CharType.CHAR_EXP, State.STATE_EXP);
        }};
        transfer.put(State.STATE_POINT, statePointMap);

        Map<CharType, State> statePointWithoutIntMap = new HashMap<CharType, State>() {{
            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);
        }};
        transfer.put(State.STATE_POINT_WITHOUT_INT, statePointWithoutIntMap);

        Map<CharType, State> stateFractionMap = new HashMap<CharType, State>() {{
            put(CharType.CHAR_SPACE, State.STATE_END);
            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);
            put(CharType.CHAR_EXP, State.STATE_EXP);
        }};
        transfer.put(State.STATE_FRACTION, stateFractionMap);

        Map<CharType, State> stateExpMap = new HashMap<CharType, State>() {{
            put(CharType.CHAR_SIGN, State.STATE_EXP_SIGN);
            put(CharType.CHAR_NUMBER, State.STATE_EXP_INT);
        }};
        transfer.put(State.STATE_EXP, stateExpMap);

        Map<CharType, State> stateExpSignMap = new HashMap<CharType, State>() {{
            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);
        }};
        transfer.put(State.STATE_EXP_SIGN, stateExpSignMap);

        Map<CharType, State> stateExpIntMap = new HashMap<CharType, State>() {{
            put(CharType.CHAR_SPACE, State.STATE_END);
            put(CharType.CHAR_NUMBER, State.STATE_EXP_INT);
        }};
        transfer.put(State.STATE_EXP_INT, stateExpIntMap);

        Map<CharType, State> stateEndMap = new HashMap<CharType, State>() {{
            put(CharType.CHAR_SPACE, State.STATE_END);
        }};
        transfer.put(State.STATE_END, stateEndMap);

        return transfer;
    }

    /**
     * ÊúâÈôêÁä∂ÊÄÅÊú∫Áâà
     */
    public boolean isNumberWithFiniteStateMachine(String s) {
        Map<State, Map<CharType, State>> transfer = transfer();
        State state = State.STATE_INITIAL;
        for (int i = 0; i < s.length(); i++) {
            state = transfer.get(state).get(toCharType(s.charAt(i)));
            if (state == null) return false;
        }
        return state.equals(State.STATE_INTEGER)
                || state.equals(State.STATE_POINT)
                || state.equals(State.STATE_FRACTION)
                || state.equals(State.STATE_EXP_INT)
                || state.equals(State.STATE_END);
    }

    public boolean isNumber(String s) {
        // return s.matches("\\s*(([+-]?\\d+\\.?(\\d+)?([Ee][-+]?\\d+)?)|([+-]?\\.?\\d+([Ee][-+]?\\d+)?))\\s*");
        return s.matches("\\s*[+-]?((\\d+\\.?(\\d+)?)|(\\.?\\d+))([Ee][-+]?\\d+)?\\s*");
    }

    /**
     * ÊâæËßÑÂæãÁâà
     */
    public boolean isNumberWithLaw(String s) {
        boolean sign = false;
        boolean point = false;
        boolean exp = false;
        boolean number = false;
        boolean expNumber = false;
        // ÂéªÈô§Â≠óÁ¨¶‰∏≤Á©∫Ê†º
        s = s.trim();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c >= '0' && c <= '9') {
                if (!exp) number = true;
                if (exp) expNumber = true;
            } else if (c == '.') {
                if (point) return false;
                if (exp) return false;
                point = true;
            } else if (c == 'e' || c == 'E') {
                if (exp) return false;
                if (point && !number) return false;
                exp = true;
                sign = false;
            } else if (c == '-' || c == '+') {
                if (sign) return false;
                if (point && !number) return false;
                if (number && !exp) return false;
                if (expNumber && exp) return false;
                sign = true;
            } else {
                return false;
            }
        }
        return number && !exp || number && expNumber;
    }

    public boolean isNumberWithLaw1(String s) {
        // ÊúâÂ∞èÊï∞ÁÇπ
        boolean point = false;
        // Ëá™ÁÑ∂Êï∞Ê†áËØÜ
        boolean exp = false;
        // Êï∞Â≠óÊ†áËØÜ
        boolean number = false;
        // ÂéªÈô§Â≠óÁ¨¶‰∏≤Á©∫Ê†º
        s = s.trim();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) >= '0' && s.charAt(i) <= '9') {
                number = true;
            } else if (s.charAt(i) == '.') {
                // ÊåáÊï∞ÈÉ®ÂàÜ,Â∑≤Â≠òÂú®Â∞èÊï∞ÁÇπÊó∂ÊéíÈô§
                if (exp || point) return false;
                point = true;
            } else if (s.charAt(i) == 'e' || s.charAt(i) == 'E') {
                // ÈáçÂ§çÊàñËÄÖÊ≤°ÊúâÈùûÊåáÊï∞ÈÉ®ÂàÜ
                if (exp || !number) return false;
                exp = true;
                number = false;
                point = false; // ÊåáÊï∞ÈÉ®ÂàÜÊ≤°ÊúâÂ∞èÊï∞ÁÇπ
            } else if (s.charAt(i) == '-' || s.charAt(i) == '+') {
                // Êï∞Â≠óÂêéÈù¢ Êàñ Â∞èÊï∞ÁÇπÂêéÈù¢
                if (number || point) return false;
            } else {
                return false;
            }
        }
        return number;
    }

}
